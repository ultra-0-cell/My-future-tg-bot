import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
)
import datetime
import requests
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞-‡¶∏‡¶Æ‡ßÉ‡¶¶‡ßç‡¶ß Docker Telegram Bot, Fly.io-‡¶§‡ßá ‡¶π‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ!")

# /help command
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start - ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßã
"
        "/help - ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø
"
        "/now - ‡¶è‡¶ñ‡¶®‡¶ï‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶ì ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ
"
        "/ayah <‡¶∏‡ßÇ‡¶∞‡¶æ:‡¶Ü‡ßü‡¶æ‡¶§> - ‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶®‡ßá‡¶∞ ‡¶Ü‡ßü‡¶æ‡¶§
"
        "/weather <‡¶∂‡¶π‡¶∞> - ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
"
        "/quote - ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶ï‡ßã‡¶ü‡¶∏
"
        "/ask <prompt> - AI Chat
"
        "/image <prompt> - AI ‡¶õ‡¶¨‡¶ø"
    )

# /now command
async def now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await update.message.reply_text(f"üïí ‡¶è‡¶ñ‡¶® ‡¶∏‡¶Æ‡ßü: {now}")

# /ayah command
async def ayah(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args[0] if context.args else "2:255"
        response = requests.get(f"http://api.alquran.cloud/v1/ayah/{args}/bn.bengali")
        data = response.json()
        if data["status"] == "OK":
            ayah_text = data["data"]["text"]
            await update.message.reply_text(f"üìñ ‡¶Ü‡ßü‡¶æ‡¶§ {args}:
{ayah_text}")
        else:
            await update.message.reply_text("‚ùå ‡¶Ü‡ßü‡¶æ‡¶§ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è ‡¶Ü‡ßü‡¶æ‡¶§ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

# /weather command
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = " ".join(context.args) if context.args else "Dhaka"
    api_key = os.getenv("WEATHER_API_KEY", "your-weather-api-key")
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
        res = requests.get(url).json()
        if res.get("cod") != 200:
            await update.message.reply_text("‚ùå ‡¶∂‡¶π‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
            return
        temp = res["main"]["temp"]
        desc = res["weather"][0]["description"]
        await update.message.reply_text(f"üå§Ô∏è {city.title()}: {temp}¬∞C, {desc}")
    except:
        await update.message.reply_text("‚ö†Ô∏è ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

# /quote command
async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quotes = [
        "üïå "‡¶Ø‡ßá ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≠‡¶∞‡¶∏‡¶æ ‡¶ï‡¶∞‡ßá, ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π ‡¶§‡¶æ‡¶ï‡ßá ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü‡•§"",
        "‚ò™Ô∏è "‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡ßü‡¶á ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶ï‡¶∑‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡ßç‡¶¨‡¶∏‡ßç‡¶§‡¶ø ‡¶Ü‡¶õ‡ßá‡•§"",
        "üìø "‡¶Ø‡ßá ‡¶Ø‡¶§ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶á‡¶¨‡¶æ‡¶¶‡¶§ ‡¶ï‡¶∞‡ßá, ‡¶∏‡ßá ‡¶§‡¶§ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∂‡¶æ‡¶®‡ßç‡¶§‡¶ø ‡¶™‡¶æ‡ßü‡•§""
    ]
    import random
    await update.message.reply_text(random.choice(quotes))

# /ask command (Dummy)
async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = " ".join(context.args) if context.args else "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßá?"
    await update.message.reply_text(f"ü§ñ AI ‡¶¨‡¶≤‡ßá: '{prompt}' ‡¶è‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶∏‡¶¨‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡•§ (‡¶°‡ßá‡¶Æ‡ßã)")

# /image command (Dummy)
async def image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = " ".join(context.args) if context.args else "A cat"
    await update.message.reply_text(f"üñºÔ∏è '{prompt}' ‡¶è‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡•§ (‡¶°‡ßá‡¶Æ‡ßã)")

# Setup app and handlers
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("now", now))
app.add_handler(CommandHandler("ayah", ayah))
app.add_handler(CommandHandler("weather", weather))
app.add_handler(CommandHandler("quote", quote))
app.add_handler(CommandHandler("ask", ask))
app.add_handler(CommandHandler("image", image))

app.run_polling()
